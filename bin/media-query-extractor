#!/usr/bin/env node

var parse      = require('css-parse'),
    stringify  = require('css-stringify'),
    fs         = require('fs'),
    util       = require('util'),
    minimist   = require('minimist')
;

// Parse command line arguments
var argv = minimist(process.argv.slice(2));

if (argv.V || argv.version){
    console.log('0.1.0');
    process.exit(0);
}

if (argv.help || argv.h || !argv._[0] || !argv._[1]){
    console.log('  Usage: media-query-extractor [options] <input file> <output file>');
    console.log('');
    console.log('  Options:');
    console.log('');
    console.log('    -h, --help        Output usage information');
    console.log('    -V, --version     Output the version number');
    console.log('    -b, --breakpoint  Add a breakpoint to be extracted. Model: --breakpoint "media query string[|output file name]"');
    console.log('');
    console.log('  Example:');
    console.log('');
    console.log('    $ media-query-extractor --help');
    console.log('    $ media-query-extractor \\');
    console.log('        --breakpoint "screen and (min-width: 480px)|tablet.css" \\');
    console.log('        --breakpoint "screen and (min-width: 660px)|big-tablet.css" \\');
    console.log('        --breakpoint "screen and (min-width: 990px)|desktop.css" \\');
    console.log('        styles.css remaining.css');
    console.log('');
    process.exit(0);
}

// Normalize breakpoints & output file names
var outputFileName = argv._[1];
var outputFiles = {
    'all': {
        fileName: outputFileName,
        rules: []
    }
};

var breakpoints = argv.breakpoint || argv.b;
if (typeof breakpoints === "string"){
    breakpoints = [breakpoints];
}

if (breakpoints){
    for( var i=0; i<breakpoints.length; i++) {

        var parts = breakpoints[i].split('|');

        if (parts.length === 2) {
            outputFiles[parts[0]] = {
                fileName   : parts[1],
                rules      : []
            };
        }
        else {
            outputFiles[parts[0]] = {
                fileName   : parts[0] + ".css",
                rules      : []
            };
        }
    }
}

// Read css input file
var inputFileName = argv._[0];
var css = fs.readFileSync(inputFileName, {
    encoding: "utf8"
});

var tree = parse(css);
var rulesByMediaQuery = {};
var rulesOfMediaQuery;

for( var i=0; i<tree.stylesheet.rules.length; i++) {
    var rule = tree.stylesheet.rules[i];

    if (rule.type === 'media') {
        rulesByMediaQuery[rule.media] = rulesByMediaQuery[rule.media] || [];
        rulesOfMediaQuery = rulesByMediaQuery[rule.media];
        
        rulesOfMediaQuery.push.apply(rulesOfMediaQuery, rule.rules);
    }
    else{
        rulesByMediaQuery['all'] = rulesByMediaQuery['all'] || [];
        rulesOfMediaQuery = rulesByMediaQuery['all'];
        rulesOfMediaQuery.push(rule);
    }
}

// Dispatch rules to different files
for (var mediaQuery in rulesByMediaQuery) {

    if (!outputFiles[mediaQuery]){
        if (mediaQuery === 'all'){
            outputFiles['all'].rules.push.apply(outputFiles['all'].rules,
                                                rulesByMediaQuery[mediaQuery]);
        }
        else{
            outputFiles['all'].rules.push({
                type: "media",
                media: mediaQuery,
                rules: rulesByMediaQuery[mediaQuery],
            });
        }
    }
    else{
        outputFiles[mediaQuery].rules.push.apply(outputFiles[mediaQuery].rules,
                                                 rulesByMediaQuery[mediaQuery]);        
    }
}


// Loop on each asked file, and write it
for (mediaQuery in outputFiles) {
    makeCssFromRules(outputFiles[mediaQuery].fileName,
                     outputFiles[mediaQuery].rules,
                     mediaQuery);
}


function makeCssFromRules(fileName, rules, mediaQuery) {

    // Compose the css tree to be stringified
    var tree = {
        type: "stylesheet",
        stylesheet: {
            rules: []
        }
    };

    // Global file ?
    if (mediaQuery === 'all') {
        tree.stylesheet.rules = rules;
    }
    // Or spécific file ?
    else{
        tree.stylesheet.rules.push({
            type: "media",
            media: mediaQuery,
            rules: rules,
        });
    }

    fs.writeFileSync(fileName, stringify(tree));
}

process.exit(0);